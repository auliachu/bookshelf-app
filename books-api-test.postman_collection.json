{
	"info": {
		"_postman_id": "1408214a-de1b-4f50-a80c-2d6265ad5d5c",
		"name": "Books API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26809236"
	},
	"item": [
		{
			"name": "Saving Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value',()=>{\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json',()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object',()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value',()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty',()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    const {data}= responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							"    pm.environment.set('bookId', data.bookId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Matematika\",\r\n    \"authors\": \"Aulia\",\r\n    \"publisher\": \"Gramedia\",\r\n    \"publishyear\":\"2019\",\r\n    \"pages\": \"224\",\r\n    \"description\": \"Buku perjalanan kehidupan Jerome\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json',()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object',()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', ()=>{\r",
							"    const responseJson= pm.response.json();\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"})\r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', ()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    const {data}=responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specified Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json type',()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', ()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value',()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain note object', ()=>{\r",
							"    const responseJson=pm.response.json();\r",
							"    const {data}= responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('book');\r",
							"    pm.expect(data.book).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('book object should contain correct value for body',()=>{\r",
							"    const responseJson= pm.response.json();\r",
							"    const {data: {book}}= responseJson;\r",
							"\r",
							"    const expectedId = pm.environment.get('bookId');\r",
							"    const expectedTitle = 'Matematika';\r",
							"    const expectedAuthors = 'Aulia';\r",
							"    const expectedPublisher = 'Gramedia';\r",
							"    const expectedPublishyear = '2019';\r",
							"    const expectedPages = '224';\r",
							"    const expectedDesc = 'Buku perjalanan kehidupan Jerome';\r",
							"    \r",
							"    pm.expect(book).to.have.ownProperty('id');\r",
							"    pm.expect(book.id).to.equals(expectedId);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('title');\r",
							"    pm.expect(book.title).to.equals(expectedTitle);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('authors');\r",
							"    pm.expect(book.authors).to.equals(expectedAuthors);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('publisher');\r",
							"    pm.expect(book.publisher).to.equals(expectedPublisher);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('publishyear');\r",
							"    pm.expect(book.publishyear).to.equals(expectedPublishyear);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('pages');\r",
							"    pm.expect(book.pages).to.equals(expectedPages);\r",
							"\r",
							"    pm.expect(book).to.have.ownProperty('description');\r",
							"    pm.expect(book.description).to.equals(expectedDesc);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json',()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object',()=>{\r",
							"    const responseJson= pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value',()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil diperbarui');\r",
							"})\r",
							"\r",
							"pm.test('when request the updated done', ()=>{\r",
							"    const bookId = pm.environment.get('bookId');\r",
							"    pm.sendRequest(`http://localhost:9000/books/${bookId}`, (error, response) =>{\r",
							"        if(!error){\r",
							"            pm.test('then the updated book should contain the latest data', ()=>{\r",
							"                const responseJson= response.json();\r",
							"                const {data:{book}} = responseJson;\r",
							"\r",
							"                const expectedTitle= \"Matematika Nyenyenye!\";\r",
							"                const expectedAuthors = \"Jerome Polin\";\r",
							"                const expectedpublisher= \"Gramedia\";\r",
							"                const expectedPublishyear = \"2019\";\r",
							"                const expectedPages= \"224\";\r",
							"                const expectedDescription = \"Buku perjalanan kehidupan Jerome\";\r",
							"\r",
							"                pm.expect(book.title).to.equals(expectedTitle);\r",
							"                pm.expect(book.authors).to.equals(expectedAuthors);\r",
							"                pm.expect(book.publisher).to.equals(expectedpublisher);\r",
							"                pm.expect(book.publishyear).to.equals(expectedPublishyear);\r",
							"                pm.expect(book.pages).to.equals(expectedPages);\r",
							"                pm.expect(book.description).to.equals(expectedDescription);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Matematika Nyenyenye!\",\r\n    \"authors\": \"Jerome Polin\",\r\n    \"publisher\": \"Gramedia\",\r\n    \"publishyear\": \"2019\",\r\n    \"pages\": \"224\",\r\n    \"description\": \"Buku perjalanan kehidupan Jerome\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when request the deleted note', () => {\r",
							"    const bookId = pm.environment.get('bookId');\r",
							"    pm.sendRequest(`http://localhost:9000/books/${bookId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Buku tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	]
}